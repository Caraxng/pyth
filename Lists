#there are two techniques to acomplish same thing with list

method one normal loop method..indefinite loop

total = 0
count = 0

while True:
    inp = input('Enter a Number:')
    if inp == 'Done' :break
    value = float(inp)
    total = total + value
    count = count + 1
Average + total/count
print('Average:',Average)
Print('Well Done')
exit()

list method

numlist = list()      # list reserved assigned to the variable numlist. While numlist is empty list

while True :
    inp = input('Enter a Number:') 
    if inp == 'Done' : break
    value = float(inp)
    numlist.append(value)
Average = sum(numlist) / len(numlist)
print('Average: ',Average)
print('All Good')
    
    
    
    # List Part  3
    How strings and list re related............ we use square bracked operator to do lots of things.
    
    Best Friends Lists and String: 
    
    split breaks strings apart and produce list of strings. We can access a particu word or loop thru all.
    
    abc = ('with three words')                      # split looks for blanks and break it into pieces and return the elements
    stuff = abc.split()
    ['with','three','words']
    
    print(len(stuff))
    3
    print(stuff[0])
    with
    
    for w in stuff print('w')  
    with
    three 
    words
    
    
    # split rule...
    when you don't specify a delimiter multiple spaces are treated like one delimiter.... treated as one space
    you can specify delimiter character to use in the spacing
    
    
    line = ' a lot       of spacing'
    etc = line.split()
    print('etc')
    ['a ', 'lot', 'of', 'spacing']
    
    line = 'first;second;third'   # you don't have to split based on spaces only
    thing = line.split()
    print(thing)
    [first;second;third]   ...returns list with no space. It's a line. Split job is to use space to split based on spaces
    print(len(thing))
    1
    
    thing = line.split(;)   #you can tell split what character you want to base the split on instead of the default space. Based on semicolon
    print(thing)
    
    ['first', 'second', 'third']
    
  print(len(thing))
  3
  
  
  #Still on email data parsing 
  
  from stephen.marquard@uct.ac.za sat Jan 5 09:14:16 2008

  
  fhand = open('mbox.txt')
  for line in fhand:
      line = line.rstrip()
      if not line startwith('from') : continue
      words = line.split()
print(words)

['from ', 'stephen.marquard@uct.ac.za', 'sat', 'Jan', '5', '09:14:16', '2008']
 
print(words[2])
sat


# The Double split patteren:

sometimes we split a line one way,and then grab one of the pieces of the line and split that piece again

words = line.split()
email = words[1]
print(email)

stephen.marquard@uct.ac.za 

pieces = email.split('@')
['stephen.marquard', 'uct.ac.za')

host = piece([1])
print(host)
or 

print(pieces[1])


from stephen.marquard@uct.ac.za sat Jan 5 09:14:16 2008


cleaner than using find()

topics covered   cocept of a collection,list and definite loops,indexing and lookup,list mutability,functions:len min max,sum, slicing list. List methods:append,remove
sorting lists, sorting list, splitting strings into list of words,using split to parse strings.

Assignment :

1


8.4 Open the file romeo.txt and read it line by line. For each line, 
split the line into a list of words using the split() method. 
The program should build a list of words. For each word on each line 
check to see if the word is already in the list and if not append 
it to the list. When the program completes, sort and print the resulting 
words in python sort() order as shown in the desired output.
You can download the sample data at http://www.py4e.com/code3/romeo.txt



fname = input("Enter file name: ")
fh = open(fname)
lst = list()
for line in fh:
    line.rstrip()
    word = line.split()
    for x in word:
        if x not in lst :
            lst.append(x)
    else:
        pass
#lstst = lst.sort()   
#print(lst.sort())
lst.sort()
print(lst)
    
    
#print(line.rstrip())


or




2 .


8.5 Open the file mbox-short.txt and read it line by line. When you find a line that starts with 'From ' like the following line:
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
You will parse the From line using split() and print out the second word in the line (i.e. the entire address of the person who sent the message). Then print out a count at the end.
Hint: make sure not to include the lines that start with 'From:'. Also look at the last line of the sample output to see how to print the count.

You can download the sample data at http://www.py4e.com/code3/mbox-short.txt



inp = input('Enter File Name:')
fopen = open(inp)
count = 0
for line in fopen:
    line.rstrip()
    if not line.startswith('From'):
        continue 
    word = line.split()
    print(word[1])
    count = count + 1 
    
print('There were',count,'lines in the file with From as the first word')    
  
