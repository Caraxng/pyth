In computing,regular expression also referred to as regex or regexp provides a concise and flexible means for matching strings of text such as particular
characters,words,or patterns,of characters. A regular expression is written in a formal language that can be interpreted by a regular expression processor.

The idea of a regex is that you come up with a lang. ,a character based program language where you can do smart searching basically

Really smart/clever wildcard expressions for matching and parsing strings

really smart find or search  
Very structured way to go about searching for information

Understanding Regular Expressions
 * Very powerful and quite cryptic
 * Fun once you understand them
 * Regex are language unto themselves
 * A language of ' marker characters'- programming with characters.
 * It's kind of an old school language- compact


Python Regular Expression Quick Guide

^        Matches the beginning of a line
$        Matches the end of the line
.        Matches any character
\s       Matches whitespace
\S       Matches any non-whitespace character
*        Repeats a character zero or more times
*?       Repeats a character zero or more times 
         (non-greedy)
+        Repeats a character one or more times
+?       Repeats a character one or more times 
         (non-greedy)
[aeiou]  Matches a single character in the listed set
[^XYZ]   Matches a single character not in the listed set
[a-z0-9] The set of characters can include a range
(        Indicates where string extraction is to start
)        Indicates where string extraction is to end


Little programming language except it's character based. Not line based and not keyword based.
it has certain active characters that the character means something versus the character represents the character itself

REGEX MODULE
* Before you use regular expression in your program ,you must import the library using 'import re'
* You can use re.search() to check if the strings matches a regular expression,similar to using the find() method for strings
*You can use re.findall() to extract portions of a string that match your regular expressions,similar to combination of find() and slicing: var[5:10]

*Using re.search() like Find()

hand = open('mbox-short.txt')
for line in hand :
    line =line.rstrip()
    if line.find('From: ') >= 0 :   # searchs for From: all round the body of the mbox file
        print(line)


re import

hand = open('mbox-short.txt')
for line in hand :
    line =line.rstrip()
    if re.search('From: ', line) :
        print(line)


We fine-tune what is matched by adding special characters to the string




hand = open('mbox-short.txt')
for line in hand :
    line =line.rstrip()
    if line.startswith('From: ') : # looks for like that begins with From:
        print(line)
        
        
        
        
 re import

hand = open('mbox-short.txt')
for line in hand :
    line =line.rstrip()
    if re.search('^From: ', line) : # regex ^ means startswith
        print(line)   
        
        
Wild-card Characters :

* The dot characters matches any characters. 
* If you add the asterisk character,the character is 'any number of times':





X-Sieve: CMU Sieve 2.3
X-DSPAM-Result: Innocent
X-DSPAM-Confidence: 0.8475
X-Cotent-Type-Message-Body: text/plain


^X. * :  # the above expression checked the regex. Line that startswith X,matches any character many times and has colon. Perfect wildcard

(means startswith,X above,Match any character,many times,: colon above


Fine-Tuning Your Match:

Depending on how clean your data is and the purpose of your application,you may want to narrow your match down a bit

Some times you want to be a little more clear on your match....

X-Sieve: CMU Sieve 2.3 # match the above example
X-DSPAM-Result: Innocent # match too
X-Plane is behind schedule: two weeks # Matches too

How can you be more clear what you want matched and not ?

\S = Match any nonwhite space character
+ = One or more times

^ X- \ S + : #Match the beginning of line for character capital X,that has a dash, X-. Then match any character other than white space\S,one or more times. folowd by :

Applying it here : 

X-Sieve: CMU Sieve 2.3 # match the above example
X-DSPAM-Result: Innocent # match too
X-Plane is behind schedule: two weeks #  There is white space here. Between the X and colon you can only have nonwhite space character

FROM MATCHING TO EXTRACTING DATA

* re.search() returns True or False depening on whether the string matches the regular expression.
* If we actually want the matching data to be extracted we use re.findall()

import re
x = 'My 2 favorite numbers are 19 and 42'
y = re.findall('[0-9] +',x) # [0-9] is one character...0 or 1 or 2 to 9, + means one or mor times,one or more digits
print(y)
['2', '19', '42'] 

[0-9] one or more digits

list of three strings
x = 'My 2 favorite numbers are 19 and 42'  # has aeiou but not uppercase so no match
y = re.findall('[AEIOU] +',x)
print(y)
[] # prints empty list cause no match

WARNING : GREEDY MATCHING 

The repeat characters (* and +) push outward in both directions(greedy) to match the largest possible 
string.

import re
x = 'From: Using the : Character'
y = re.findall('^F.+ :',x) # starts with F,repeats a charact zero or more times,repeats one ore more times,last charac in the match is a :
print(y)
['From: Using the :]  #greedy matching. When it can match more than one overlapping string,it chooses the largest.

why not From:


NONGREEDY MATCHING

Not all regular expression repeat codes are greedy. If you add the ? character,the * and + characters chill out a bit
import re
x = 'From: Using the : Character'
y = re.findall('^F.+? :',x)  #+? means not greedy. Preferes the shorter of the strings
print(y)
['From:] 

^F.+? :   Match the line where first charact starts with (^F)match any character in the line,one or more chacaters but not greedy(the first or shorter instance+?,
          and finally that ends with a colon :
          
          
FINE-TUNING STRING EXTRACTION :

You can refine the match for re.findall() and separately determine which portion of the match is 
to be extracted by using parentheses()


From Stephen.marquard@uct.ac.za Sat Jan 5 19:14:16 2008
y = ref.findall('\S+@\S+',x)    # at least one non whitespace character. Looking for string that has @ and one or mor non blank characters on both side
print(y)
['Stephen.marquard@uct.ac.za']
\S+@\S+  none blank charactes,followed by one or more of it, that has @,then one ore non blank characters   

We can give a matching string that is different from the extracting string using parenthesis
From Stephen.marquard@uct.ac.za Sat Jan 5 19:14:16 2008
y = ref.findall('^From (\S+@\S+)',x) # line starts with From, then a space, that has one or more nonblank charact,then @,then one or nonblank charac
                                     # but the ^From is part of the match why didn't it extract. Because we use parentheses to show what we want extracted
print(y)                 
['Stephen.marquard@uct.ac.za']   () start your extraction and end your extraction inside the 

^From makes for better matching. Parenthesis specifies what you want extracted


STRING PARSING EXAMPLES :

* Using Find and string slicing

From Stephen.marquard@uct.ac.za Sat Jan 5 19:14:16 2008

data = 'From Stephen.marquard@uct.ac.za Sat Jan 5 19:14:16 2008'
atpos = data.find('@')
print(atpos)
21 

sposs = data.find(' ',atpos) # find the empty space after atpos position
print(sposs)
31

host = data[atpos+1 : sposs] @ position plus 1,u up to : space/sposs position uct.ac.za
print(host)

uct.ac.za

* Double split pattern

Sometimes we split a line one way and then grab one of the pieces of the line and split that pieces again.


From Stephen.marquard@uct.ac.za Sat Jan 5 19:14:16 2008

if line startswith('From ') :
    line = line.rstrip()
    words = line.split()  ['From', 'Stephen.marquard@uct.ac.za','Sat','Jan', '5', '19:14:16', '2008']
    email = words[1]      Stephen.marquard@uct.ac.za  #
    host = email.split('@') [ 'Stephen.marquard','uct.ac.za']
    print(host[1])         
    uct.ac.za

* The Regex Version

import re
line = 'From Stephen.marquard@uct.ac.za Sat Jan 5 19:14:16 2008'
y = re.findall('@ ([ ^]*)',line) find @ sign, extrac set of characters that are not blank[ ^],zero or moe times,which means to run till it finds a blank then stops
print(y)
['uct.ac.za']


#Look through the line until you find an at sign. Then start extracting ( , match non blank charact [ ^], match many of then *, then end of extrac )

Even Cooler Regex Version

import re
line = 'From Stephen.marquard@uct.ac.za Sat Jan 5 19:14:16 2008'
y = re.findall('^From  .*@ ([ ^]*)',line) #From matches, then we see space, then any number of characts,then we see an @ sign, then start extracting till thereis blnk
print(y)
['uct.ac.za']

starting at the beginning of the line look for the string 'From '

First one might trigger on lines that we don't want. This is more precise.



X-DSPAM-Confidence: 0.8475

import re
hand = open('mbox-short.txt)
numlist = list()
for line in hand :
    line = line.rstrip()
    stuff = refindall('^X-DSPAM-Confidence: ([0-9 .] +)',line)
    if len(stuff) != 1 : continue # if the number of xtracted items (num in list),that is len of stuff is not equal != to 1, if what is xtracted is not one thing
                                  # which should be cause is this 0.8475,continue.
    num = float(stuff[0]) #it's = to 1, and it's you assign it a variable and convert to float since it's float. Positionally which is 0
    numlist.append(num)   # append stuff is now num now append it to the empty list
print('Maximum:',max (numlist))
maximum: 0.9907

[0-9.] ....a single character ,+ one or more times 



Escape Character

If you want a special regular expression character to just behave normally (most of the time),you prefix it with \ 

import re
x = 'We just received $10.00 for cookies. '
y = re.findall('\$ [0-9.] +',x) # find a dollar sign followed by one or more digits or dots
print(y)
['$10.00']


+ at least one or more,  $ real dollar sign, 0-9. a digit or period













