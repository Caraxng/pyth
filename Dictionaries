Chapter 9
Python Dictionaries

are what most programmers love the most about python....

what's collection...
* nice because we can put more than one value in it and carry them around in one convenient package
* we have a bunch of values in one single variable
* we do this by having more than one place ' in ' the variable
* we have more ways of finding the different places in a variable

WHAT IS NOT A COLLECTION

Most of our variables have one value in them,when we put new values in the variable,the old value is overwritten.
x = 2
x = 4
print(x)
4

A STORY OF TWO COLLECTIONS:

List:  A linea collection of values that stay in order
Dictionary : A bag of values each with it's own label

Dict are python most powerful data collection...
allows us to do fast database-like operations in python
have different names in different languages...

associative arrays /perl & php
properties or map or hashmap --java
proprty bag-- c#/.net

are like list but they have keys,label,tag

associate between key in a value while list is position in a value
list is less powerful and flexible than dict ...most modern prog lang have this notion of associative arrays
they are key value pairs....dict

Collections are about putting more than one thing in...difference is in ways of indexing them


list index their entries based on position in the list
dict like bags no order
so we index things in bag with look up tag/key

purse = dict()  # lets make a dctionary just like an empty list
purse = ['money'] = 12  # i want to store 12 and i want to label it money. # item + quantity
purse = ['candy'] = 3
purse = ['tissue'] = 75

print(purse)
{'money':12, 'candy':3,'tissue':75}

print(purse[candy])   #we can ask with an index operator what's in purse for the key candy
3

purse[candy] = purse[candy] + 2  # we can update or modify things  here add 2 to it
print(purse)
{'money':12,'tissue':75,'candy':5}


COMPARING LIST AND DICT
they both can have new items added

lst = list()            ddd = dict()
lst.append(21)          ddd['age'] = 21
lst.append(183)         ddd['course'] = 183
print(lst)              print(ddd)
[21, 83]                {'age':21,'course':183}
positional. in list      mapping
indexing is positioning
used posi to change
21 to 23

lst[0] = 23             ddd['age'] = 23   #while dict is the key used key to change 21 to 23
print(lst)              print(ddd)
[23,83]                 {'age':23,'course':183}

different is the index mechanism. How we store things and how we look things up


AGAIN

Pretty much doing same thing execpt indexing mechanism

                                        LIST


lst = list()                  key       Value
lst.append(21)                 0          21             lst
lst.append(183)                1          183
print(lst)
[21, 183] 
lst[0] = 23
print(lst)
[23,83]

                                           Dictionary


ddd = dict()
ddd['age'] = 21                        Key                 Value 
ddd['course'] = 182
print(ddd)                             ['age']             21
{'age':21,'course':182}                ['course']          182                                ddd

ddd['age'] = 23
print(ddd)
 {'age':23,'course':183}
 
 
 dictionary key is a string...can use other things. But string is simpler...
 
 
 
 DICTIONARY LITERALS/CONSTANTS
 
 Dict leterals use curly braces and have a list of key:value pairs
 You can make an empty dict using empty curly braces
 
 jjj= {'chuck':1, 'fred':42,'jan':100}  # dict literals use the exact same syntax to printout. start and end with curly brace{}
 print(jjj)                             # and have series of key(chuck),colon(:),and value (1) in line with associative array..associating 1(value) with key chuck
 {'jan':100, 'chuck':1,'fred':42}
 
 000 = {} # make an empty dict/ short cut to do this purse = dict() / purse = {}
 print(000)
 {}
 
 MOST COMMON NAME:
 most common application of dictionary.....counting
 
 Making histograms....counting the frequency of things
 
 counting how often we see something :
 
 humans use eyes to check and weigh the frequency of things. 
 
 if you have a million things would be better to write python program using dictionaries
 
 ddd = dict()
 ddd = ['csev'] = 1
 ddd = ['cwen'] = 1
 print(ddd)
 {'csev':1,'cwen':1}
 
 ddd['cwen'] = ddd['cwen'] + 1
 print(ddd)
 {'csev':1,'cwen':2}
 
 Dict Tracebacks ....
 
 It's an error to call or ref a key which is not in the dictionary
 
 we canuse the in operator to see if a key is in the dict.
 
 ccc = dict()
 print(cc['csev'])
 traceback
 
 csev in cc
 false
 
 WHEN WE SEE A NEW NAME :
 
 When we encounter a new name,we need to add a new entry in the dictionary and if this is the second or later time 
 we are seeing the name,we simply add one to the count in the dict.
 
counts = dict()   # create and empty dict
names = ['csev', 'cwen', 'csev', 'zqian', 'cwen'] #list of keys to go to the dict
for name in names:              # loop through the names...name(could be anything x, tee ) will assume each key name or name in names and iterate
    if name not in counts:    # if name not in dictionary
        counts[name] = 1  # add the name to it as one ,first occurence # This line is adding a new thing
    else:                         # if not
        counts[name] = counts[name] + 1       #if not ,if d key is already in the dict then add plus to it's number of occurence # addin somti to exisiting thing
print(counts) 
{'csev':2, 'cwen':2, 'zqian':1}

#if the name we are looking at,lets say csev is not in the dictionary already,then set it to be 1. And that becomes the value for that name

THE GET METHOD FOR DICT:

The pattern of checking to see if a key is in the dictionary or not and assuming a default value if the key is not
there is so common that there is a method called get() that does this for us.
names = ['csev', 'cwen', 'csev', 'zqian', 'cwen']
if name in counts:
    x = counts[name]          # Do one thing if it's in there,retrieve the current thing
else:
    x = o             # otherwise pick a default value in this case 0
x = counts.get[name, 0] #if you say counts,counts is a dictionary .get a method. You give it a key and a default value.If the key is will get the value if not 
print(x)
{'csev':2, 'zqian':1, 'cwen':2}     #Default Value if key does not exist and no traceback

the four lines of code became/collapses this one line : x = counts.get[name, 0] because x is going to be whatever is there if it exist or it's going to be 0 then add
1 to it and it's to be one


counts = dict()
names = ['csev', 'cwen', 'csev', 'zqian', 'cwen'] #list of keys to go to the dict
for name in names:
    counts[name] = counts.get(name, o) + 1
print(counts) 
{'csev':2, 'cwen':2, 'zqian':1}    
   
COUNTING WORDS IN TEXT :


Counting Pattern.

The general to count words in a line of text is to split the line into two words,then loop through the words and use a 
dictionary to track the count of each word independently.

counts = dict()
print('Enter a line of text:')
line = input('')

words = line.split()
print('Words':,words)
print('counting ......')
for word in words:
    counts[words] = counts.get(word,0) + 1
print('Counts', counts)

DEFINITE LOOPS & DICTIONARIES

Even though dictionaries are not stored in order,we can write a for loop that goes through all the entries in the dictionary.
Actually it goes through all the keys in the dictionary and looks up the value.

counts = {'chuck':1 , 'fred':42 , 'Jan':100}
for key in counts:
    print(key,counts[key]) # first get the keys.... then the counts'value' for each key
    
Jan 100
Chuck 1
Fred 42

Retrievig List of Keys and Values :

You can get a list of keys(tags,label),values(number),or items(both,key & value) from a dictionary.

jj = {'chuck':1 , 'fred':42 , 'Jan':100}

print(list (jj))
['jan', 'chuck', 'fred']

print(jj.keys())
['jan', 'chuck', 'fred']

print(jj.values())
[100 , 1 , 42]

print(jj.items())
[('jan',100), ('chuck',1), ('fred',42)]   # first combined composite data structure where it's a list,three item list.
     0             1 ^          2
                     |
what is a tuple ? coming soon

BONUS TWO ITERATION VARIABLES 

* We loop through the key-value pairs in a dictionary using 'two' iteration variables.
* Each iteration,the first variable is the key and the second variable is the corresponding value 
for the key
jj = dict() # my idea. Not added in the example
jj = {'chuck':1 , 'fred':42 , 'Jan':100}
for aa,bb in jj.items() :
print(aa,bb)
 
                  key       value
                  aa        bb

jan 100          [jan]      100
chuck 1          [chuck]     1
fred 42          [fred]     42




name = input('Enter File Name:')    # word.txt
handle = open(name)

counts = dict()  # empty dict
for line in handle :
    word = line.split()
    for word in words:
        counts[word] = counts.get(word,0) +  1
    
print ('Counts', counts)
to 16

to = the most common word
16 = number of occurence


Name = input('Enter File Name:')   clown.txt
handle = open(Name)

counts = dict()
bigcount = None # number of instance of most common word
bigword = None  # most common word
for word,count in counts.items()
    if bigcount is None or count > bigcount :
        bigword = word   #max  loop
        bigcount = count
print(bigword,bigcount)
the 7

bigword = the = most common word
bigcount = 7 = number of occurence
highest word =big word = word that is the most common
Bigcount is the word the most number of times

