Using Web Services 
Chapter 13 
Part 1
Data On The Web :

* With HTTP request/response cycle( learned about sockets,urllib,how to pull out html off the web)well understood and well supported,there was a natural move 
towards exchanging data between programs using these protocols
* We needed to come up with an agreed way to represent data going between applications and across networks
* There are two commonly used formats : XML and JSON

Now using same request response cycle to retrieve information specifically designed for programmatic consumption

Why not produce data in a format that makes good sense to a program because programs wanna talk to each other. If you recall the whole idea of sockets is one applicat
ion process sending data to another application


SENDING DATA ACROSS THE NET

PHP                                  JavaScript
Array                                  Object

{

         'name':'Chuck'
         'phone':'303-4456'


}
Python                                 Java
Dictionary                            HashMap

a.k.a wire protocol ,what we send on the wire
 different languages and they are all connected and they might want to send data true the network php,java programs and we have to decide on a protocol 
 that is indepedent of prog language and we call that the wire protocol.
 
 Because if you were to take some connection and watch the exact characters that go back and fort,thats what you would see if you are monitoring the wire
 
 AGREEING ON A WIRE FORMAT
 
 Python 
 
 Serialize
 
 <person>
 <name>
 Chuck
 </name>
 <phone>
 303-4456
 </phone>
 </person>
 
 De-serialize   Java Hashmap
 
 xml
 
 Another format 
 
 JSON
 JavaScript Object Notation
 
 Simpler and easier but not precise as xml
 
 PHP                                  JavaScript
Array                                  Object

{

         'name':'Chuck'
         'phone':'303-4456'


}
Python                                 Java
Dictionary                            HashMap



json is very common used in apis and rest


XML 

Extensible Markup Language 

* Main purpose is to help information systems share structured data
* Started as simplified subset of the standard generalized markup language SGML and is designed to be relatively human-legible

XML TERMINOLOGY

Tags : Indicate the beginning and ending of elements 

Attributes : Key/Value pairs on the opening tag of xml element

Serialize/De-serialize: Convert data in one program into a into a common format that can be stored and or transmitted between systems in programming language
independent manner

XML Basics 

<Person>         #start tag
 <name> Chuck</name> # end tag
 <phone type="int'l">  #attribute  key equals value
 +178049985896   #text content
 </phone>
 <email hide="yes"/>  # self closing  tag where you don't have a closing tag. All together. All needed data is in attribute.
</person>       # end tag

Same as html difference we name the tag anything we want. 


WHITE SPACE 

Xml doesn't care much about whitespace. It does in text areas. 
Line ends do not matter.
White space is generally discarded in text elements.
We indent only to be readable


XML Elements or Nodes

Simple and complex elements





















XML TREE

<a>
 <b>x</b>
 <c>
  <d>y</d>
  <e>z</e>
 </c> 
</a> 


Elements & Text 

XML Texts And Attribute :
<a>
 <b W="5">x</b>
 <c>
  <d>y</d>
  <e>z</e>
 </c> 
</a> 


XML As Paths :

<a>
 <b>x</b>      a/b/b   X
 <c>
  <d>y</d>     a/c/d/  Y
  <e>z</e>     a/c/e   Z
 </c> 
</a> 

XML Schema

* Description of legal format of an xml
* Expressed in terms of constraints on the structure and contents of documents
* Often used to specify a contract between systems ' my systems only accepts xml that conforms to this particular schema '.
* If a particular piece of xml meets the specification of the particular schema ,it's said to validate


XML Validation

             xml document
                                              Validator
            xml schema contract 
            

XML Document :


<person>
 <name>Chuck</name>
 <phone>303-4456</phone>
</person>      
                                             Validator . XML Doc and Schema points to a validator

SCHEMA CONTRACT

<xs: complexType name="person">
 <xs:sequence>
  <xs:element name="lastname" type"xs:string"/>
  <xs:element name="age" type"xs:integer"/>
  <xs:element name="dateborn" type"xs:date/>
 </xs:sequence>
</xs:complexType> 


XML SCHEMA LANGUAGES

* Document Type Definition DTD
 * en.wikipedia.org/wiki/Document_Type_Definitionn
* Standard Generalized Markup Language (ISO 8879:1986 SGML)
 * en.wikipedia.org/wiki/SGML
* XML Schema for W3C (XSD)
 * en.wikipedia.org/wiki/XML_Schema_(W3C)


XSD XML Schema 

* We will focus on the world wide web consortium W3C version
* It's often called 'w3 Schema' because Schema is considered generic
* More commonly it's called xsd because the file extension is xsd

XSD STRUCTURE

<person>                                # also a complexType
 <name>Chuck Severance</name>
 <age>17</age>                          # all xs:element as well
 <dateborn>2001/04/17</dateborn>
</person>


<xs:complexType name="person">
 <xs:sequence>                          # xs:sequence
  <xs:element name="lastname" type="xs:string"/>        # xs:element
  <xs:element name="age" type="xs:integer/>
  <xs:element name="dateborn" type="xs:Date"/>
 </xs:sequence>
</xs:complexType>                         #xs:complexType




XSD CONSTRAINTS 

xsd Schema

<xs:element name="person">
 <xs:complexType>
  <xs:sequence>
   <xs:element name="full_name" type="xs:string"
    minOccurs="1" maxOcurs="1" />    # minimum number of times it can occur
   <xs:element name="child_name" type="xs:string"
    minOccurs="0" maxOccurs="10" />
  </xs:sequence>
 </xs:complexType>
</xs:element> 

XML

<person>
 <full_name>Tove Refsnes</full_name>   # occurs once
 <child_name>Hege</child_name>        # Ouccurs 4 remaining 6 as par above maxOccur constraint for child_name
 <child_name>State</child_name>
 <child_name>Jim</child_name>
 <child_name>Borge</child_name>
</person> 


XSD Data Types 

<xs:element name="customer" type="xd:string"/>
<xs:elemant name="start" type="xs:date"/>
<xs:elemant name="startdate" type="xs:dateTime"/>
<xs:element name="prize" type="xs:decimal"/>
<xs:element name="weeks" type="xs:integer"/>

It's common to represent time in UTC /GMT given that servers are often scattered around the world.

xml

<customer>John Smith</customer>
<start>2022-09-24</start>
<startdate>2022-05-30T09:30:10Z</startdate>
<prize>999.50</prize>
<weeks>30</weeks>

ISO 8601 Date/Time format:



Year  Month Day Time of Day

 |      |         |
2022-  05-  30T09:30:10Z
              |        |
             Time     Time zone (In UTC/GMT rather than local time)



XML In Python

import xml.etree.ElementTree as ET # must be imported. The name of the library is etree.elementTree as ET shortctut for it

data = '''<Person>       #normally the lib ought come from a network. But it's put in the string object(data. Triple quoted string
 <name> Chuck</name> 
 <phone type="int'l">  
  +178049985896                        # XML
 </phone>
 <email hide="yes"/> 
</person>'''

tree = ET.fromstring(data) #tree object equals fromstring data. pass a string of data
print('Name:',tree.find('name').text) #for Name,in tree find name and print the text in the name element which is chuck
print('Attr:',tree.find('email').get('hide'))  #for Name,in tree find name and print the text in the name element which is chuck


Another example:

import xml.etree.ElementTree as ET

input '''<stuff>
 <users>
  <user x="2">
   <id>001</id>
   <name>Chuck</name>
  </user>
  <user x="7">
   <id>009</id>
   <name>Brent</name>
  </user> 
 </users>
</stuff>  
   
stuff = ET.fromstring(input)
lst = stuff.findall('users/user')
print('User count:',len(lst))
for item in lst:
    print('Name', item.find('name').text)
    print('Id', item.find('id').text)
    print('Attribute',item.get('x'))

 
 JSON   

 Javascript Object Notation

 * Douglas Crockfold Discovered Json
 * Object literal Notation in Javascript

 You are likely to use more json than xml. XML better for rich and hierrachical documents. Json is best for pulling data out of system
 and moving it between two systems with the minimum
 looks a lot like literal notation for javascript.
 Looks a lot like python literal notation for objects and for lists. 

 JSOn is not rfc or standardized. The inventor registered it and documented it and people started using it and it became popular.

 It's derived from javascript literal syntax.

*Json represents data in nested list and dictionaries
 import json

Some python process json

 data = '''{
    "name" : "chuck",   # key value pairs..both have quotes..looks a lot like python. kv pair as a sting
    "phone"  : {     # can have objects within objects. Inside data object is this phont object
      "type" : "intl" ,
    "number" : "+1 7343034456", #kv within those contained objects
    }
    "email" : {  # another object inside object
      "hide" : "yes",

    }
 }'''

 info = json.loads(data) # pass the string into json library load s, loads means load from string , parses it and returns a dict
 print('Name:',info["name"])
 print('Hide:',info["email"]["hide"])

 json is structured reprent and simpler than xml
 in python everything either comes back as a list or dict r dict within a list or dict within a lis

 
 Another more complex example :
 list of two dictionaries...list because it starts with square bracket dict because it's key value
 import json
input = '''[
  { "id" : "001",
    "x" : "2",
    "name" : "chuck"
  },
  { "id" : "009",
    "x" : "7",
    "name" : "chuck"
  },
]'''

info = json.loads(input)  # info a list with two items
print('User Count:',len(info))
for item in info:
    print('Name:',item["name"])
    print('Id:',item["id"])
    print('Attribute:',item["x"])



Service Oriented Approach part 5

Approach to solving a complex application problem where all the data isn't present in one computer and somehow spread out over the internet connected by the internet or internal network

The idea is that some applications cannot contain everything.

* Most nontrivial web applications use services
* They use services from other applications 
   * Credit card charge
   * Hotel reservation systems
* Services publish the rules applications must follow to make use of the services
(API) application programming interface


       APPLICATION

         ^  ^  ^
         |  |  |
         |  |  |
   
          APS's




Multiple Systems 

* Initially- two systems cooperate and split the problem.
* As the data/service become useful-multiple application want to use the application/information



GEOjson  Part 6

Application Programming Interface
The API itself is largely abstract in that it specifies an interface and controls the behavior of the objects specified in that interface. The software that provides the functionality described by an API is said to be an implementation of the API. An API is typically defined in terms of the programming language used to build an application.

Google Maps API

http://maps.googleapis.com/maps/api/geocode/json?address=Ann+Arbor%2C+MI


Example 

import urllib.request, urllib.parse, urllib.error  # import urllib
import json    #import json

serviceurl = 'http://maps.googleapis.com/maps/api/geocode/json?'  #grab the url

while True :    #little while loop that wil ask for location
    address = input('Enter Location:')
    if len(address) < 1 : break
    
    url = serviceurl + urllib.parse.urlencode({'address': address})  #the lib takes the url

    print('Retrieving:',url)  #get the url,retrieve
    uh = urllib.request.urlopen(url) #open the url
    data = uh.read().decode() #read and decode the url
    print('Retrieved':,len(data),'Characters') # print length of characters retrieved. It's string after decoding

    try:  # we take the data and pass it to json. The try worked here
        js = json.loads(data)
    except:
        js = None
    if not js or 'status' not in js or js['status'] != 'ok':
        print('==== Failure To Retrieve ====')
        print(data)
        continue
    lat = js["results"][0]["Geometry"]["location"]["lat"]
    lng = js["results"][0]["geometry"]["location"]["lng"]
    print('lat', lat,' lng', lng)
    location = js['results'][0]['formatted_address']
    print(location)



Output:

Enter Location : Ann Arbor ,MI
Retrieving: http://maps.googleapis.com/.....
Retrieved: 1669 Characters
lat 4.22808256 lng -83.7430378
Ann Arbor,MI, USA
Enter Location:



http://maps.googleapis.com/maps/api/geocode/json?address=Ann+Arbor%2C+MI


"status" : "ok"
"results" : [
    {
        "geometry" : {
            "location_type" : "APPROXIMATE",
              "location" : {
                   "lat" : 4.22808256,
                    "lng" : -83.7430378
            }
        },
        "address_components" : [
            {
                "long_name" : "Ann Arbor",
                "type": [
                    "locality"
                    "political"
                ],
                "short_name" : "Ann Arbor"    
            }
        ],
        "formatted address": "Ann Arbor, MI, USA",
        "type": [
            "locality"
            "political"
        ]    
    }
]


PART 7 : Twitter 

API Security and Rate Limiting 

* The compute resources to run these API's are not free
* The data provided by these ApI's is usually valuable 
* The data providers might limit the number of requests per day,demand an API key or even charge for usage
* They might change the rules as things progress 
* 




